#!/usr/bin/env python

import os
import shutil
from pathlib import Path
import tempfile
import glob
import subprocess
import mimetypes
import json
import re
import requests

CONFIG_DIR = Path.home() / ".config" / "phone-camera-upload"
CONFIG_FILE = CONFIG_DIR / "config.json"

DATA_DIR = Path.home() / ".local" / "share" / "phone-camera-upload"
DATA_UPLOADED_FILE = DATA_DIR / "uploaded"

PHOTO_DIR = Path.home() / "syncthing" / "p7-camera" / "Camera"

REGEX = re.compile(r"^(PXL|IMG|VID)_\d{8}_\d{9}.*\.\w+$")

client = None
temp_dir = None


class WebdavClient:
    def __init__(self, url, username, password):
        self.url = url
        self.username = username
        self.password = password
        self._known_existing_dirs = set()
        self._session = requests.Session()
        self._session.auth = (self.username, self.password)

    def _mkdir(self, path):
        return self._session.request(
            "MKCOL", f"{self.url}/{path}", auth=(self.username, self.password)
        )

    def _exists(self, path):
        r = self._session.head(
            f"{self.url}/{path}", auth=(self.username, self.password)
        )
        return r.status_code in (200,)

    def _mkdirs(self, path):
        path_accum = Path()
        for path_part in path.parts:
            path_accum /= path_part
            if path_accum in self._known_existing_dirs:
                continue

            if self._exists(path_accum):
                self._known_existing_dirs.add(path_accum)
                continue

            r = self._mkdir(path_accum)
            if r.status_code in (201,):
                self._known_existing_dirs.add(path_accum)
            else:
                raise Exception(
                    f"Invalid mkdir response status code: {r.status_code}. Response: {r.text}"
                )

    def upload(self, local_filename, remote_filename):
        self._mkdirs(remote_filename.parent)
        with open(local_filename, "rb") as f:
            r = self._session.put(
                f"{self.url}/{remote_filename}",
                auth=(self.username, self.password),
                data=f,
            )

            if r.status_code not in (201, 204):
                raise Exception(
                    f"Invalid upload response status code: {r.status_code}. Response: {r.text}"
                )


class LocalClient:
    def __init__(self, base_path):
        self._base_path = base_path
        self._known_existing_dirs = set()

    def _mkdirs(self, path):
        parent = path.parent
        if parent not in self._known_existing_dirs:
            parent.mkdir(parents=True, exist_ok=True)
            self._known_existing_dirs.add(parent)

    def upload(self, local_filename, remote_filename):
        file_path = self._base_path / remote_filename
        self._mkdirs(file_path)

        shutil.move(str(local_filename), str(file_path))


def handle(file_path, base_name):
    print(f"handling {base_name}")
    if not REGEX.match(base_name):
        raise Exception(
            f"file name invalid: base_name: {base_name}. file_path: {file_path}"
        )

    parts = base_name.split("_")
    date = parts[1]
    year = date[:4]
    month = date[4:6]

    (mime, _) = mimetypes.guess_type(base_name)
    mime = mime.split("/")[0]
    if mime == "image":
        without_ext = os.path.splitext(base_name)[0]
        output_file = f"{without_ext}.jpg"
        output_path = temp_dir / output_file
        subprocess.run(
            [
                "jpeg-recompress",
                "--accurate",
                "--quality",
                "high",
                "--method",
                "ms-ssim",
                str(file_path),
                str(output_path),
            ],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        client.upload(
            output_path,
            Path(year) / month / output_file,
        )
        try:
            os.remove(str(output_path))
        except FileNotFoundError:
            pass
        return True
    if mime == "video":
        without_ext = os.path.splitext(base_name)[0]
        output_file = f"{without_ext}.mp4"
        output_path = temp_dir / output_file
        subprocess.run(
            [
                "ffmpeg",
                "-i",
                str(file_path),
                "-vcodec",
                "libx265",
                "-crf",
                "25",
                str(output_path),
            ],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        client.upload(
            output_path,
            Path(year) / month / output_file,
        )
        try:
            os.remove(str(output_path))
        except FileNotFoundError:
            pass
        return True

    print("unknown filetype")
    return False


if __name__ == "__main__":
    with open(CONFIG_FILE) as f:
        config = json.load(f)

    if config["remote"] == "webdav":
        client = WebdavClient(
            config["webdav_url"],
            config["webdav_username"],
            config["webdav_password"],
        )
    elif config["remote"] == "local":
        client = LocalClient(config["local_path"])

    dir = tempfile.TemporaryDirectory()
    temp_dir = Path(dir.name)

    try:
        with open(DATA_UPLOADED_FILE, "r") as f:
            uploaded = set(line.strip() for line in f)
        with open(DATA_UPLOADED_FILE, "a") as f:
            for file_path in sorted(glob.glob(str(PHOTO_DIR / "*"))):
                base_name = os.path.basename(file_path)
                if base_name not in uploaded:
                    if handle(file_path, base_name):
                        f.write(f"{base_name}\n")
    finally:
        dir.cleanup()
